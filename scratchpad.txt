
This page is full of text, which is somehow not clear,
so here's what I will do next
    - first of all try to implement that expandable behaviour.
    - second implement that viewpager
    - third make that diff work

======================================================

implement api requests to run in parallel
    - https://stackoverflow.com/questions/54458960/test-with-consecutive-calls-to-mockwebserver
    - https://stackoverflow.com/a/58659423

how do I want to update the data
    - one way is to update or insert the data everytime new data arrives
    - second way is to manually diff for new data
    - third way is to let room handle this for us
        - this is good; will see if room have something like this; so update operations are faster
        - I think room automatically diff

updatedView/Bookmarked Fragment will only show libraries which are bookmarked and latestVersion > oldVersion

DONE => Feature 0: run work whenever user opens the app.
    - should consider the case when user opens it multiple times in a day.
        - in that case we should only fetch it one time; on first opening
    - user can force fetch though (refresh)

Feature 1: Ability to Bookmark Libraries <== here
    - only show diff between bookmarked libraries
    - auto fetch and showNotifications can be enabled
        - will show notification if bookmarked library changes (nope)

Feature 2: user should have ability to enable fetching in background
    - in that case we gonna fetch every 12 hours
    - i.e. giving work manager interval of 12 hours

Feature 3:
    - sort by date option in main screen
    - able to search
    - update date for a library is same as last modified header date in response of group-index

Comparing Versions of Artifacts
    - Will enable us implement feature 1

Currently, trying to find if i should use bottom navigation or viewpager
    - going with viewpager
========================================================================
UI Enhancements (After Implementing all of the above functionality)
 - swipe to refresh

Error Handling:
    - currently it only presents a snackbar saying update failed with retry button
    - Show error(snackbar saying no network) on app opening if network is not available
    - error when parsing goes wrong or fetching goes wrong


========================================================================
NOTES

just in case, vo stands for value object / value type

https://stackoverflow.com/a/58659423
    - The reason he's saying we do not need Dispatchers.IO
    - https://medium.com/androiddevelopers/coroutines-on-android-part-i-getting-the-background-3e0e54d20bb
    - * Room will provide main-safety automatically if you use suspend functions, RxJava, or LiveData.
      ** Networking libraries such as Retrofit and Volley manage their own threads
       and do not require explicit main-safety in your code when used with Kotlin coroutines.

I am noting some things,
1. Library Tracker code especially test code is becoming too much pain/complicated due to usage of both LiveData and Flow.
2. So it would be better if somehow Livedata can be replaced with Flow
3. Since Flow is also a Language Feature or better FrameWork Feature it would be much greater to use it.
4. Should we be using Flow in Domain like on abstract level, well it depends since my code does not have that much of a domain we can. It depends on Stability of the class. Is flow stable enough?

Now, I am getting hang of this code...
let's start coding from tomorrow...